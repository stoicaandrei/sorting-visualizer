{"version":3,"sources":["utils/generateArrayOfLength.ts","utils/shuffleArray.ts","utils/colorMapToSortingPoints.ts","utils/camelCaseToCaseText.ts","hooks/useInterval.tsx","contexts/SortingContext.tsx","contexts/ArrayContext.tsx","contexts/StatusContext.tsx","App/Header/PlayPauseButton.tsx","App/Header/RefreshArrayButton.tsx","App/Header/ArrayLengthSlider.tsx","App/Header/FrequencySlider.tsx","App/Header/index.tsx","App/Sider/AlgorithmSelector.tsx","components/Visualizer/Bar.tsx","components/Visualizer/ArrayCanvas.tsx","utils/ValueMapper.ts","components/Visualizer/index.tsx","components/CodeEditor.tsx","App/Sider/AlgorithmEditor.tsx","App/Sider/index.tsx","App/Content.tsx","App/index.tsx","ContextProvider.tsx","reportWebVitals.ts","index.tsx","algorithms/selectionSort.ts","algorithms/bubbleSort.ts","algorithms/mergeSort.ts","contexts/AlgorithmContext.tsx"],"names":["generateArrayOfLength","size","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","Array","from","x","i","colorMapToSortingPoints","colorMap","result","Object","values","forEach","point","camelCaseToCaseText","s","replace","charAt","toUpperCase","slice","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","SortingStateContext","React","createContext","undefined","SortingActionsContext","SortingProvider","children","useArrayState","algorithm","useAlgorithmState","useState","sortingSteps","setSortingSteps","points","setPoints","frequency","setFrequency","isPlaying","useStatusState","finish","useStatusActions","next","done","value","Provider","changeFrequency","useSortingState","context","useContext","Error","ArrayStateContext","ArrayActionsContext","INITIAL_ARRAY","ArrayProvider","arrayLength","setArrayLength","setArray","generateArray","n","refreshArray","replaceArray","arr","useArrayActions","StatusStateContext","StatusActionsContext","StatusProvider","compileAlgorithm","useAlgorithmActions","status","setStatus","isFinished","play","pause","PlayPauseButton","onClick","RefreshArrayButton","ArrayLengthSlider","className","min","max","onChange","FrequencySlider","useSortingActions","tipFormatter","Header","disabled","AlgorithmSelector","selectedAlgorithm","algorithmNames","selectAlgorithm","map","name","Option","Bar","height","color","style","backgroundColor","memo","ArrayCanvas","heightMapper","originalInterval","targetInterval","low1","high1","low2","high2","val","round","ValueMapper","nr","index","Visualizer","CodeEditor","onValueChange","highlight","code","languages","js","AlgorithmEditor","algorithmString","setAlgorithmString","Sider","collapsible","collapsedWidth","width","Content","App","ContextProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","selectionSort","bubbleSort","mergeSort","AlgorithmStateContext","AlgorithmActionsContext","keys","algorithms","AlgorithmProvider","setSelectedAlgorithm","setAlgorithm","sortingAlgorithm","eval"],"mappings":"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","file":"static/js/main.cd50cbde.chunk.js","sourcesContent":["import { shuffleArray } from './index';\n\nexport default function generateArrayOfLength(size: number) {\n  const array = Array.from({ length: size }, (x, i) => i);\n\n  return shuffleArray(array);\n}\n","export default function shuffleArray<T>(array: T[]) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import { ColorMap, SortingPoints } from 'types';\n\nconst colorMapToSortingPoints = (colorMap: ColorMap): SortingPoints => {\n  const result = {} as SortingPoints;\n\n  Object.values(colorMap).forEach((point) => {\n    result[point] = 'red';\n  });\n\n  return result;\n};\n\nexport default colorMapToSortingPoints;\n","const camelCaseToCaseText = (s: string) => {\n  const result = s.replace(/([A-Z])/g, ' $1');\n  return result.charAt(0).toUpperCase() + result.slice(1);\n};\n\nexport default camelCaseToCaseText;\n","import { useRef, useEffect } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef<() => void | null>();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== 'undefined') {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from 'react';\n\nimport { ColorMapGenerator, SortingPoints } from 'types';\n\nimport { colorMapToSortingPoints } from 'utils';\n\nimport { useInterval } from 'hooks';\nimport {\n  useArrayState,\n  useAlgorithmState,\n  useStatusState,\n  useStatusActions,\n} from 'contexts';\n\ntype State = {\n  array: number[];\n  frequency: number;\n  points: SortingPoints;\n};\n\ntype Actions = {\n  changeFrequency: (arg0: number) => void;\n};\n\nconst SortingStateContext = React.createContext<State | undefined>(undefined);\nconst SortingActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst INITIAL_FREQUENCY = 60;\n\nconst SortingProvider: React.FC = ({ children }) => {\n  const { array } = useArrayState();\n  const { algorithm } = useAlgorithmState();\n\n  const [sortingSteps, setSortingSteps] = useState<ColorMapGenerator>();\n  const [points, setPoints] = useState({});\n\n  useEffect(() => {\n    setSortingSteps(algorithm ? algorithm(array) : undefined);\n    setPoints({});\n  }, [array, algorithm]);\n\n  const [frequency, setFrequency] = useState(INITIAL_FREQUENCY);\n  const changeFrequency = (frequency: number) => setFrequency(frequency);\n\n  const { isPlaying } = useStatusState();\n  const { finish } = useStatusActions();\n\n  const delay = isPlaying ? 1 : 1_000_000;\n  const interval = 1000 / (frequency / delay);\n  useInterval(() => {\n    if (!sortingSteps) return;\n\n    const next = sortingSteps.next();\n\n    if (next.done) return finish();\n\n    const colorMap = next.value;\n    const points = colorMapToSortingPoints(colorMap);\n    setPoints(points);\n  }, interval);\n\n  return (\n    <SortingStateContext.Provider value={{ array, points, frequency }}>\n      <SortingActionsContext.Provider value={{ changeFrequency }}>\n        {children}\n      </SortingActionsContext.Provider>\n    </SortingStateContext.Provider>\n  );\n};\n\nconst useSortingState = () => {\n  const context = React.useContext(SortingStateContext);\n  if (context === undefined) {\n    throw new Error('useSortingState must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nconst useSortingActions = () => {\n  const context = React.useContext(SortingActionsContext);\n  if (context === undefined) {\n    throw new Error('useSortingActions must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nexport { useSortingState, useSortingActions, SortingProvider };\n","import React, { useEffect, useState } from 'react';\n\nimport { generateArrayOfLength } from 'utils';\n\ntype State = {\n  array: number[];\n  arrayLength: number;\n};\n\ntype Actions = {\n  refreshArray: () => void;\n  setArrayLength: (arg0: number) => void;\n  replaceArray: (args0: number[]) => void;\n};\n\nconst ArrayStateContext = React.createContext<State | undefined>(undefined);\nconst ArrayActionsContext = React.createContext<Actions | undefined>(undefined);\n\nconst INITIAL_LENGTH = 100;\nconst INITIAL_ARRAY = generateArrayOfLength(INITIAL_LENGTH);\n\nconst ArrayProvider: React.FC = ({ children }) => {\n  // The length is used for generating new arrays\n  const [arrayLength, setArrayLength] = useState(INITIAL_LENGTH);\n  const [array, setArray] = useState(INITIAL_ARRAY);\n\n  const generateArray = (n: number) => setArray(generateArrayOfLength(n));\n\n  useEffect(() => {\n    generateArray(arrayLength);\n  }, [arrayLength]);\n\n  const refreshArray = () => generateArray(arrayLength);\n\n  const replaceArray = (arr: number[]) => {\n    // Replaces the array with a custom one\n    setArray(arr);\n    setArrayLength(arr.length);\n  };\n\n  return (\n    <ArrayStateContext.Provider value={{ array, arrayLength }}>\n      <ArrayActionsContext.Provider\n        value={{ setArrayLength, refreshArray, replaceArray }}\n      >\n        {children}\n      </ArrayActionsContext.Provider>\n    </ArrayStateContext.Provider>\n  );\n};\n\nconst useArrayState = () => {\n  const context = React.useContext(ArrayStateContext);\n  if (context === undefined) {\n    throw new Error('useArrayState must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nconst useArrayActions = () => {\n  const context = React.useContext(ArrayActionsContext);\n  if (context === undefined) {\n    throw new Error('useArrayActions must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nexport { useArrayState, useArrayActions, ArrayProvider };\n","import React, { useState } from 'react';\n\nimport { useAlgorithmActions, useArrayActions } from 'contexts';\n\ntype Status = 'paused' | 'playing' | 'finished';\n\ntype State = {\n  status: Status;\n  isPlaying: boolean;\n};\n\ntype Actions = {\n  play: () => void;\n  pause: () => void;\n  finish: () => void;\n};\n\nconst StatusStateContext = React.createContext<State | undefined>(undefined);\nconst StatusActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst StatusProvider: React.FC = ({ children }) => {\n  const { refreshArray } = useArrayActions();\n  const { compileAlgorithm } = useAlgorithmActions();\n\n  const [status, setStatus] = useState<Status>('finished');\n  const isPlaying = status === 'playing';\n  const isFinished = status === 'finished';\n\n  const resumePlaying = () => setStatus('playing');\n  const newGame = () => {\n    refreshArray();\n    compileAlgorithm();\n  };\n\n  const play = () => {\n    if (isFinished) newGame();\n    resumePlaying();\n  };\n  const pause = () => setStatus('paused');\n  const finish = () => setStatus('finished');\n\n  return (\n    <StatusStateContext.Provider value={{ status, isPlaying }}>\n      <StatusActionsContext.Provider value={{ play, pause, finish }}>\n        {children}\n      </StatusActionsContext.Provider>\n    </StatusStateContext.Provider>\n  );\n};\n\nconst useStatusState = () => {\n  const context = React.useContext(StatusStateContext);\n  if (context === undefined) {\n    throw new Error('useStatusState must be used within a StatusProvider');\n  }\n\n  return context;\n};\n\nconst useStatusActions = () => {\n  const context = React.useContext(StatusActionsContext);\n  if (context === undefined) {\n    throw new Error('useStatusActions must be used within a StatusProvider');\n  }\n\n  return context;\n};\n\nexport { useStatusState, useStatusActions, StatusProvider };\n","import React from 'react';\n\nimport { Button } from 'antd';\n\nimport { useStatusState, useStatusActions } from 'contexts';\n\nconst PlayPauseButton: React.FC = () => {\n  const { isPlaying } = useStatusState();\n  const { play, pause } = useStatusActions();\n\n  return (\n    <Button\n      onClick={() => {\n        isPlaying ? pause() : play();\n      }}\n    >\n      {isPlaying ? 'Pause' : 'Play'}\n    </Button>\n  );\n};\n\nexport default PlayPauseButton;\n","import React from 'react';\n\nimport { Button } from 'antd';\n\nimport { useArrayActions } from 'contexts';\n\nconst RefreshArrayButton: React.FC = () => {\n  const { refreshArray } = useArrayActions();\n\n  return <Button onClick={refreshArray}>New Array</Button>;\n};\n\nexport default RefreshArrayButton;\n","import React from 'react';\n\nimport { Slider, Space } from 'antd';\n\nimport { useArrayState, useArrayActions } from 'contexts';\n\nconst ArrayLengthSlider: React.FC = () => {\n  const { arrayLength } = useArrayState();\n  const { setArrayLength } = useArrayActions();\n\n  return (\n    <Space>\n      Size\n      <Slider\n        className=\"array-length-slider\"\n        value={arrayLength}\n        min={20}\n        max={300}\n        onChange={setArrayLength}\n      />\n    </Space>\n  );\n};\n\nexport default ArrayLengthSlider;\n","import React from 'react';\n\nimport { Slider, Space } from 'antd';\n\nimport { useSortingActions, useSortingState } from 'contexts';\n\nconst FrequencySlider: React.FC = () => {\n  const { frequency } = useSortingState();\n  const { changeFrequency } = useSortingActions();\n\n  return (\n    <Space>\n      Speed\n      <Slider\n        className=\"frequency-slider\"\n        value={frequency}\n        tipFormatter={(n) => `${n} ticks/sec`}\n        min={1}\n        max={120}\n        onChange={changeFrequency}\n      />\n    </Space>\n  );\n};\n\nexport default FrequencySlider;\n","import React from 'react';\n\nimport { Button, Layout, Space } from 'antd';\n\nimport PlayPauseButton from './PlayPauseButton';\nimport RefreshArrayButton from './RefreshArrayButton';\nimport ArrayLengthSlider from './ArrayLengthSlider';\nimport FrequencySlider from './FrequencySlider';\n\nconst Header: React.FC = () => {\n  return (\n    <Layout.Header>\n      <Space>\n        <PlayPauseButton />\n        <RefreshArrayButton />\n        <Button disabled>Custom Array</Button>\n        <ArrayLengthSlider />\n        <FrequencySlider />\n      </Space>\n    </Layout.Header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nimport { Select } from 'antd';\n\nimport { useAlgorithmState, useAlgorithmActions } from 'contexts';\nimport { camelCaseToCaseText } from '../../utils';\n\nconst AlgorithmSelector: React.FC = () => {\n  const { selectedAlgorithm, algorithmNames } = useAlgorithmState();\n  const { selectAlgorithm } = useAlgorithmActions();\n\n  return (\n    <Select\n      className=\"algorithm-selector\"\n      value={selectedAlgorithm}\n      onChange={selectAlgorithm}\n    >\n      {algorithmNames.map((name) => (\n        <Select.Option value={name} key={name}>\n          {camelCaseToCaseText(name)}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\n\ntype Props = {\n  height: number;\n  color: string;\n};\n\nconst Bar: React.FC<Props> = ({ height, color }) => {\n  return <div className=\"bar\" style={{ height, backgroundColor: color }} />;\n};\n\nexport default React.memo(Bar);\n","import React from 'react';\n\nimport { SortingPoints } from 'types';\n\nimport Bar from './Bar';\n\nimport { ValueMapper } from 'utils';\n\ntype Props = {\n  array: number[];\n  points: SortingPoints;\n};\n\nconst ArrayCanvas: React.FC<Props> = ({ array, points }) => {\n  const canvasHeight = 600;\n  const minBarHeight = 10;\n  const barColor = 'blue';\n\n  const minVal = Math.min(...array);\n  const maxVal = Math.max(...array);\n\n  const heightMapper = ValueMapper(\n    [minVal, maxVal],\n    [minBarHeight, canvasHeight]\n  );\n\n  return (\n    <div\n      className=\"visualizer-canvas\"\n      style={{\n        height: canvasHeight,\n      }}\n    >\n      {array.map((nr, index) => (\n        <Bar\n          key={nr}\n          height={heightMapper(nr)}\n          color={points[index] || barColor}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ArrayCanvas;\n","type Interval = [number, number];\n\nexport default function ValueMapper(\n  originalInterval: Interval,\n  targetInterval: Interval\n) {\n  const [low1, high1] = originalInterval;\n  const [low2, high2] = targetInterval;\n\n  return (value: number) => {\n    const val = low2 + ((value - low1) * (high2 - low2)) / (high1 - low1);\n\n    return Math.round(val);\n  };\n}\n","import React from 'react';\n\nimport { useSortingState } from 'contexts';\n\nimport ArrayCanvas from './ArrayCanvas';\n\nconst Visualizer: React.FC = () => {\n  const { array, points } = useSortingState();\n\n  return (\n    <div>\n      <ArrayCanvas array={array} points={points} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from 'react';\n\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\n\ntype Props = {\n  value: string;\n  onChange: (arg0: string) => void;\n};\n\nconst CodeEditor: React.FC<Props> = ({ value, onChange }) => {\n  return (\n    <Editor\n      value={value}\n      onValueChange={onChange}\n      highlight={(code) => highlight(code, languages.js)}\n      className=\"code-editor\"\n    />\n  );\n};\n\nexport default CodeEditor;\n","import React from 'react';\n\nimport { CodeEditor } from 'components';\n\nimport { useAlgorithmState, useAlgorithmActions } from 'contexts';\n\nconst AlgorithmEditor: React.FC = () => {\n  const { algorithmString } = useAlgorithmState();\n  const { setAlgorithmString } = useAlgorithmActions();\n\n  return <CodeEditor value={algorithmString} onChange={setAlgorithmString} />;\n};\n\nexport default AlgorithmEditor;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport AlgorithmSelector from './AlgorithmSelector';\nimport AlgorithmEditor from './AlgorithmEditor';\n\nconst Sider: React.FC = () => {\n  return (\n    <Layout.Sider collapsible collapsedWidth={0} width=\"40%\">\n      <AlgorithmSelector />\n      <AlgorithmEditor />/\n    </Layout.Sider>\n  );\n};\n\nexport default Sider;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport { Visualizer } from 'components';\n\nconst Content: React.FC = () => {\n  return (\n    <Layout.Content>\n      <Visualizer />\n    </Layout.Content>\n  );\n};\n\nexport default Content;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport Header from './Header';\nimport Sider from './Sider';\nimport Content from './Content';\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Header />\n      <Layout>\n        <Sider />\n        <Content />\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport * as providers from './contexts';\n\nconst ContextProvider: React.FC = ({ children }) => {\n  return (\n    <providers.ArrayProvider>\n      <providers.AlgorithmProvider>\n        <providers.StatusProvider>\n          <providers.SortingProvider>{children}</providers.SortingProvider>\n        </providers.StatusProvider>\n      </providers.AlgorithmProvider>\n    </providers.ArrayProvider>\n  );\n};\n\nexport default ContextProvider;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport ContextProvider from './ContextProvider';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'antd/dist/antd.css';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const selectionSort = `\nsortingAlgorithm = function* (arr) {\n  const n = arr.length;\n\n  for (let i = 0; i < n; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n    for (let j = i + 1; j < n; j++) {\n      if (arr[j] < arr[min]) {\n        min = j;\n      }\n\n      yield { i, j };\n    }\n\n    if (min != i) {\n      // Swapping the elements\n      const tmp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = tmp;\n    }\n  }\n};\n`;\n\nexport default selectionSort;\n","const bubbleSort = `\nsortingAlgorithm = function* (arr) {\n  const n = arr.length;\n  let swapped;\n\n  for (let i = 0; i < n - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        // Swapping the elements\n        const tmp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = tmp;\n        swapped = true;\n      }\n\n      yield {i, j1: j, j2: j+1};\n    }\n\n    if (swapped == false) break;\n  }\n};\n`;\n\nexport default bubbleSort;\n","const mergeSort = `\nfunction* mergeArray(arr, start, mid, end) {\n  let start2 = mid + 1;\n\n  // If the direct merge is already sorted\n  if (arr[mid] <= arr[start2]) {\n    return;\n  }\n\n  // Two pointers to maintain start\n  // of both arrays to merge\n  while (start <= mid && start2 <= end) {\n    // If element 1 is in right place\n    if (arr[start] <= arr[start2]) {\n      start++;\n    } else {\n      const value = arr[start2];\n      let index = start2;\n\n      // Shift all the elements between element 1\n      // element 2, right by 1.\n      while (index != start) {\n        arr[index] = arr[index - 1];\n        index--;\n      }\n      arr[start] = value;\n\n      // Update all the pointers\n      start++;\n      mid++;\n      start2++;\n      yield { start, mid };\n    }\n  }\n}\n\nfunction* sort(arr, l, r) {\n  if (l < r) {\n    const m = Math.floor(l + (r - l) / 2);\n\n    yield* sort(arr, l, m);\n    yield* sort(arr, m + 1, r);\n\n    yield* mergeArray(arr, l, m, r);\n  }\n}\n\nsortingAlgorithm = function* (arr) {\n  yield* sort(arr, 0, arr.length - 1);\n};\n`;\n\nexport default mergeSort;\n","import React, { useState } from 'react';\n\nimport * as algorithms from 'algorithms';\nimport { SortingFunction } from 'types';\n\ntype AlgorithmName = keyof typeof algorithms;\n\ntype State = {\n  algorithmString: string;\n  algorithm?: SortingFunction;\n  algorithmNames: AlgorithmName[];\n  selectedAlgorithm?: AlgorithmName;\n};\n\ntype Actions = {\n  setAlgorithmString: (arg0: string) => void;\n  compileAlgorithm: () => void;\n  selectAlgorithm: (arg0: AlgorithmName) => void;\n};\n\nconst AlgorithmStateContext = React.createContext<State | undefined>(undefined);\nconst AlgorithmActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst algorithmNames = Object.keys(algorithms) as AlgorithmName[];\n\nconst AlgorithmProvider: React.FC = ({ children }) => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmName>(\n    'mergeSort'\n  );\n  const [algorithmString, setAlgorithmString] = useState(algorithms.mergeSort);\n  const [algorithm, setAlgorithm] = useState<SortingFunction | undefined>();\n\n  const selectAlgorithm = (name: AlgorithmName) => {\n    setSelectedAlgorithm(name);\n    setAlgorithmString(algorithms[name]);\n  };\n\n  const compileAlgorithm = () => {\n    let sortingAlgorithm: SortingFunction;\n    eval(algorithmString);\n    setAlgorithm(() => sortingAlgorithm);\n  };\n\n  return (\n    <AlgorithmStateContext.Provider\n      value={{ algorithm, algorithmString, algorithmNames, selectedAlgorithm }}\n    >\n      <AlgorithmActionsContext.Provider\n        value={{ setAlgorithmString, compileAlgorithm, selectAlgorithm }}\n      >\n        {children}\n      </AlgorithmActionsContext.Provider>\n    </AlgorithmStateContext.Provider>\n  );\n};\n\nconst useAlgorithmState = () => {\n  const context = React.useContext(AlgorithmStateContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAlgorithmState must be used within a AlgorithmProvider'\n    );\n  }\n\n  return context;\n};\n\nconst useAlgorithmActions = () => {\n  const context = React.useContext(AlgorithmActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAlgorithmActions must be used within a AlgorithmProvider'\n    );\n  }\n\n  return context;\n};\n\nexport { useAlgorithmState, useAlgorithmActions, AlgorithmProvider };\n"],"sourceRoot":""}