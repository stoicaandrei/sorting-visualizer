{"version":3,"sources":["utils/generateArrayOfLength.ts","utils/shuffleArray.ts","utils/pointsToColorMap.ts","utils/colorMapToSortingPoints.ts","algoritms/mergeSort.ts","hooks/useInterval.tsx","contexts/SortingContext.tsx","contexts/ArrayContext.tsx","views/Visualizer/Bar.tsx","views/Visualizer/ArrayCanvas.tsx","utils/ValueMapper.ts","views/Visualizer/index.tsx","views/ArrayActions/ChangeArrayLengthInput.tsx","views/ArrayActions/GenerateArrayButton.tsx","views/ArrayActions/index.tsx","views/SortingActions/FrequencySlider.tsx","views/SortingActions/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["generateArrayOfLength","size","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","Array","from","x","i","pointsToColorMap","points","isArray","Object","keys","map","key","colorMapToSortingPoints","colorMap","result","entries","forEach","entry","color","point","mergeArray","sort","arr","start","mid","end","start2","value","index","l","r","m","mergeSort","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","SortingStateContext","React","createContext","undefined","SortingActionsContext","SortingProvider","children","useArrayState","useState","sortingAlgorithm","generator","setGenerator","frequency","setFrequency","setPoints","next","done","Provider","changeFrequency","ArrayStateContext","ArrayActionsContext","INITIAL_ARRAY","ArrayProvider","arrayLength","setArrayLength","setArray","generateArray","n","changeArrayLength","generateNewArray","replaceArray","context","useContext","Error","useArrayActions","Bar","width","height","className","style","backgroundColor","memo","ArrayCanvas","minVal","min","maxVal","max","bars","heightMapper","originalInterval","targetInterval","low1","high1","low2","high2","val","round","ValueMapper","barWidth","display","justifyContent","nr","Visualizer","useSortingState","ChangeArrayLengthInput","type","onChange","e","parseInt","target","GenerateArrayButton","onClick","ArrayActions","FrequencySlider","useSortingActions","SortingActions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAEe,SAASA,EAAsBC,GAG5C,OCLa,SAAyBC,GAKtC,IAJA,IACIC,EAAgBC,EADhBC,EAAeH,EAAMI,OAIlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EDXAQ,CAFOC,MAAMC,KAAK,CAAEN,OAAQL,IAAQ,SAACY,EAAGC,GAAJ,OAAUA,M,WEcxCC,EAZU,SAACC,GACxB,OAAIL,MAAMM,QAAQD,GACT,eAJU,SAIQA,IAG3BE,OAAOC,KAAKH,GAAQI,KAAI,SAACC,GACI,kBAAhBL,EAAOK,KAAmBL,EAAOK,GAAO,CAACL,EAAOK,QAGtDL,ICAMM,EAZiB,SAACC,GAC/B,IAAMC,EAAwB,GAQ9B,OANAN,OAAOO,QAAQF,GAAUG,SAAQ,SAACC,GAAW,IAAD,cAClBA,EADkB,GACnCC,EADmC,UAGnCF,SAAQ,SAACG,GAAD,OAAYL,EAAOK,GAASD,QAGtCJ,G,WCRCM,G,WAwCAC,GAxCV,SAAUD,EACRE,EACAC,EACAC,EACAC,GAJF,8EAMMC,EAASF,EAAM,IAGfF,EAAIE,IAAQF,EAAII,IATtB,sDAeSH,GAASC,GAAOE,GAAUD,GAfnC,sBAiBQH,EAAIC,IAAUD,EAAII,IAjB1B,gBAkBMH,IAlBN,uBAyBM,IALMI,EAAQL,EAAII,GACdE,EAAQF,EAILE,GAASL,GACdD,EAAIM,GAASN,EAAIM,EAAQ,GACzBA,IAQF,OANAN,EAAIC,GAASI,EAGbJ,IACAC,IACAE,IAlCN,UAmCYpB,EAAO,CAACiB,EAAOC,IAnC3B,+DAwCA,SAAUH,EAAKC,EAAeO,EAAWC,GAAzC,4EACMD,EAAIC,GADV,gBAII,OAFMC,EAAIlC,KAAKC,MAAM+B,GAAKC,EAAID,GAAK,GAEnC,gBAAOR,EAAKC,EAAKO,EAAGE,GAApB,QAJJ,OAKI,uBAAOV,EAAKC,EAAKS,EAAI,EAAGD,GAAxB,QALJ,OAOI,uBAAOV,EAAWE,EAAKO,EAAGE,EAAGD,GAA7B,QAPJ,uCAWA,IAIeE,EAJiB,UAAG,SAA7BA,EAAwCV,GAAX,iEACjC,uBAAOD,EAAKC,EAAK,EAAGA,EAAI1B,OAAS,GAAjC,QADiC,oCAA7BoC,MChCSC,MApBf,SAAqBC,EAAsBC,GACzC,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,KAG1BI,qBAAU,WAMR,GAAc,OAAVH,EAAgB,CAClB,IAAMK,EAAKC,aANb,WACwC,qBAAlC,OAAOL,QAAP,IAAOA,OAAP,EAAOA,EAAeG,WACX,OAAbH,QAAa,IAAbA,KAAeG,aAIYJ,GAC7B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,K,OCAAQ,EAAsBC,IAAMC,mBAAiCC,GAC7DC,EAAwBH,IAAMC,mBAClCC,GAKIE,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3BzD,EAAU0D,IAAV1D,MAD0C,EAEhB2D,mBAASC,EAAiB5D,IAFV,mBAE3C6D,EAF2C,KAEhCC,EAFgC,KAGlDhB,qBAAU,WACRgB,EAAaF,EAAiB5D,MAC7B,CAACA,IAL8C,MAOhB2D,mBATV,IAE0B,mBAO3CI,EAP2C,KAOhCC,EAPgC,OAUtBL,mBAAS,IAVa,mBAU3C7C,EAV2C,KAUnCmD,EAVmC,KAqBlD,OAVAxB,GAAY,WACV,IAAMyB,EAAOL,EAAUK,OAEvB,IAAIA,EAAKC,KAAT,CAEA,IAAM9C,EAAW6C,EAAK/B,MAChBrB,EAASM,EAAwBC,GACvC4C,EAAUnD,MACT,IAAOiD,GAGR,cAACZ,EAAoBiB,SAArB,CAA8BjC,MAAO,CAAEnC,QAAOc,UAA9C,SACE,cAACyC,EAAsBa,SAAvB,CAAgCjC,MAAO,CAAEkC,gBAfrB,SAACN,GAAD,OAAuBC,EAAaD,KAexD,SACGN,OCnCHa,EAAoBlB,IAAMC,mBAAiCC,GAC3DiB,EAAsBnB,IAAMC,mBAAmCC,GAG/DkB,EAAgB1E,EADC,KAGjB2E,EAA0B,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAAe,EAEVE,mBALjB,KAG2B,mBAEzCe,EAFyC,KAE5BC,EAF4B,OAGtBhB,mBAASa,GAHa,mBAGzCxE,EAHyC,KAGlC4E,EAHkC,KAK1CC,EAAgB,SAACC,GAAD,OAAeF,EAAS9E,EAAsBgF,KAcpE,OACE,cAACR,EAAkBF,SAAnB,CAA4BjC,MAAO,CAAEnC,QAAO0E,eAA5C,SACE,cAACH,EAAoBH,SAArB,CACEjC,MAAO,CAAE4C,kBAfW,SAACD,GACzBH,EAAeG,GACfD,EAAcC,IAakBE,iBAVT,kBAAMH,EAAcH,IAUOO,aAT/B,SAACnD,GAEpB8C,EAAS9C,GACT6C,EAAe7C,EAAI1B,UAKjB,SAGGqD,OAMHC,EAAgB,WACpB,IAAMwB,EAAU9B,IAAM+B,WAAWb,GACjC,QAAgBhB,IAAZ4B,EACF,MAAM,IAAIE,MAAM,qDAGlB,OAAOF,GAGHG,EAAkB,WACtB,IAAMH,EAAU9B,IAAM+B,WAAWZ,GACjC,QAAgBjB,IAAZ4B,EACF,MAAM,IAAIE,MAAM,uDAGlB,OAAOF,G,OC1DHI,EAAuB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQ9D,EAAY,EAAZA,MAC7C,OACE,qBAAK+D,UAAU,MAAMC,MAAO,CAAEH,QAAOC,SAAQG,gBAAiBjE,MAInD0B,MAAMwC,KAAKN,GCsCXO,EAvCsB,SAAC,GAAuB,IAArB7F,EAAoB,EAApBA,MAAOc,EAAa,EAAbA,OAOvCgF,EAASzF,KAAK0F,IAAL,MAAA1F,KAAI,YAAQL,IACrBgG,EAAS3F,KAAK4F,IAAL,MAAA5F,KAAI,YAAQL,IACrBkG,EAAOlG,EAAMI,OAEb+F,ECtBO,SACbC,EACAC,GACC,IAAD,cACsBD,EADtB,GACOE,EADP,KACaC,EADb,mBAEsBF,EAFtB,GAEOG,EAFP,KAEaC,EAFb,KAIA,OAAO,SAACtE,GACN,IAAMuE,EAAMF,GAASrE,EAAQmE,IAASG,EAAQD,IAAUD,EAAQD,GAEhE,OAAOjG,KAAKsG,MAAMD,IDYCE,CACnB,CAACd,EAAQE,GACT,CATmB,GAHA,MAcfa,GAbc,KACH,EAYeX,GAAmBA,EAEnD,OACE,qBACET,UAAU,oBACVC,MAAO,CACLoB,QAAS,OACTC,eAAgB,gBAChBvB,OAtBe,IAuBfD,MAtBc,MAgBlB,SASGvF,EAAMkB,KAAI,SAAC8F,EAAI5E,GAAL,OACT,cAAC,EAAD,CAEEoD,OAAQW,EAAaa,GACrBzB,MAAOsB,EACPnF,MAAOZ,EAAOsB,IA3BL,QAwBJ4E,SE1BAC,EAVc,WAAO,IAAD,ELkDX,WACtB,IAAM/B,EAAU9B,IAAM+B,WAAWhC,GACjC,QAAgBG,IAAZ4B,EACF,MAAM,IAAIE,MAAM,yDAGlB,OAAOF,EKvDmBgC,GAAlBlH,EADyB,EACzBA,MAAOc,EADkB,EAClBA,OAEf,OACE,8BACE,cAAC,EAAD,CAAad,MAAOA,EAAOc,OAAQA,OCW1BqG,EAlB0B,WAAO,IACtCzC,EAAgBhB,IAAhBgB,YACAK,EAAsBM,IAAtBN,kBAER,OACE,8BACE,uBACEqC,KAAK,SACLjF,MAAOuC,EACP2C,SAAU,SAACC,GACT,IAAMlH,EAASmH,SAASD,EAAEE,OAAOrF,OACjC4C,EAAkB3E,SCLbqH,EANuB,WAAO,IACnCzC,EAAqBK,IAArBL,iBAER,OAAO,wBAAQ0C,QAAS1C,EAAjB,kCCQM2C,EAVgB,WAC7B,OACE,gCACE,cAAC,EAAD,IACA,uBAFF,iBAGgB,cAAC,EAAD,QCULC,EAhBmB,WAAO,IAC/BvD,ET4DgB,WACxB,IAAMa,EAAU9B,IAAM+B,WAAW5B,GACjC,QAAgBD,IAAZ4B,EACF,MAAM,IAAIE,MAAM,2DAGlB,OAAOF,ESlEqB2C,GAApBxD,gBAER,OACE,uBACE+C,KAAK,QACLrB,IAAK,EACLE,IAAK,IACLoB,SAAU,SAACC,GACT,IAAMnF,EAAQoF,SAASD,EAAEE,OAAOrF,OAChCkC,EAAgBlC,OCDT2F,EATkB,WAC/B,OACE,yCAEE,cAAC,EAAD,QCYSC,MAdf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,YCCKuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0a27ed4f.chunk.js","sourcesContent":["import { shuffleArray } from './index';\n\nexport default function generateArrayOfLength(size: number) {\n  const array = Array.from({ length: size }, (x, i) => i);\n\n  return shuffleArray(array);\n}\n","export default function shuffleArray<T>(array: T[]) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import { ColorMap } from 'types';\n\ntype Input = number[] | { [key: string]: number | number[] };\nconst defaultColor = 'orange';\n\nconst pointsToColorMap = (points: Input): ColorMap => {\n  if (Array.isArray(points)) {\n    return { [defaultColor]: points };\n  }\n\n  Object.keys(points).map((key) => {\n    if (typeof points[key] === 'number') points[key] = [points[key] as number];\n  });\n\n  return points as ColorMap;\n};\n\nexport default pointsToColorMap;\n","import { ColorMap, SortingPoints } from 'types';\n\nconst colorMapToSortingPoints = (colorMap: ColorMap): SortingPoints => {\n  const result: SortingPoints = {};\n\n  Object.entries(colorMap).forEach((entry) => {\n    const [color, points] = entry;\n\n    points.forEach((point) => (result[point] = color));\n  });\n\n  return result;\n};\n\nexport default colorMapToSortingPoints;\n","import { ColorMapGenerator, SortingFunction } from '../types';\nimport { pointsToColorMap as points } from 'utils';\n\nfunction* mergeArray(\n  arr: number[],\n  start: number,\n  mid: number,\n  end: number\n): ColorMapGenerator {\n  let start2 = mid + 1;\n\n  // If the direct merge is already sorted\n  if (arr[mid] <= arr[start2]) {\n    return;\n  }\n\n  // Two pointers to maintain start\n  // of both arrays to merge\n  while (start <= mid && start2 <= end) {\n    // If element 1 is in right place\n    if (arr[start] <= arr[start2]) {\n      start++;\n    } else {\n      const value = arr[start2];\n      let index = start2;\n\n      // Shift all the elements between element 1\n      // element 2, right by 1.\n      while (index != start) {\n        arr[index] = arr[index - 1];\n        index--;\n      }\n      arr[start] = value;\n\n      // Update all the pointers\n      start++;\n      mid++;\n      start2++;\n      yield points([start, mid]);\n    }\n  }\n}\n\nfunction* sort(arr: number[], l: number, r: number): ColorMapGenerator {\n  if (l < r) {\n    const m = Math.floor(l + (r - l) / 2);\n\n    yield* sort(arr, l, m);\n    yield* sort(arr, m + 1, r);\n\n    yield* mergeArray(arr, l, m, r);\n  }\n}\n\nconst mergeSort: SortingFunction = function* (arr) {\n  yield* sort(arr, 0, arr.length - 1);\n};\n\nexport default mergeSort;\n","import { useRef, useEffect } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef<() => void | null>();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== 'undefined') {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from 'react';\n\nimport { SortingPoints } from 'types';\n\nimport { mergeSort as sortingAlgorithm } from 'algoritms';\nimport { colorMapToSortingPoints } from 'utils';\n\nimport { useInterval } from 'hooks';\nimport { useArrayState } from 'contexts';\n\ntype State = {\n  array: number[];\n  points: SortingPoints;\n};\n\ntype Actions = {\n  changeFrequency: (arg0: number) => void;\n};\n\nconst SortingStateContext = React.createContext<State | undefined>(undefined);\nconst SortingActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst INITIAL_FREQUENCY = 60;\n\nconst SortingProvider: React.FC = ({ children }) => {\n  const { array } = useArrayState();\n  const [generator, setGenerator] = useState(sortingAlgorithm(array));\n  useEffect(() => {\n    setGenerator(sortingAlgorithm(array));\n  }, [array]);\n\n  const [frequency, setFrequency] = useState(INITIAL_FREQUENCY);\n  const changeFrequency = (frequency: number) => setFrequency(frequency);\n\n  const [points, setPoints] = useState({});\n  useInterval(() => {\n    const next = generator.next();\n\n    if (next.done) return;\n\n    const colorMap = next.value;\n    const points = colorMapToSortingPoints(colorMap);\n    setPoints(points);\n  }, 1000 / frequency);\n\n  return (\n    <SortingStateContext.Provider value={{ array, points }}>\n      <SortingActionsContext.Provider value={{ changeFrequency }}>\n        {children}\n      </SortingActionsContext.Provider>\n    </SortingStateContext.Provider>\n  );\n};\n\nconst useSortingState = () => {\n  const context = React.useContext(SortingStateContext);\n  if (context === undefined) {\n    throw new Error('useSortingState must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nconst useSortingActions = () => {\n  const context = React.useContext(SortingActionsContext);\n  if (context === undefined) {\n    throw new Error('useSortingActions must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nexport { useSortingState, useSortingActions, SortingProvider };\n","import React, { useState } from 'react';\n\nimport { generateArrayOfLength } from 'utils';\n\ntype State = {\n  array: number[];\n  arrayLength: number;\n};\n\ntype Actions = {\n  generateNewArray: () => void;\n  changeArrayLength: (arg0: number) => void;\n  replaceArray: (args0: number[]) => void;\n};\n\nconst ArrayStateContext = React.createContext<State | undefined>(undefined);\nconst ArrayActionsContext = React.createContext<Actions | undefined>(undefined);\n\nconst INITIAL_LENGTH = 300;\nconst INITIAL_ARRAY = generateArrayOfLength(INITIAL_LENGTH);\n\nconst ArrayProvider: React.FC = ({ children }) => {\n  // The length is used for generating new arrays\n  const [arrayLength, setArrayLength] = useState(INITIAL_LENGTH);\n  const [array, setArray] = useState(INITIAL_ARRAY);\n\n  const generateArray = (n: number) => setArray(generateArrayOfLength(n));\n\n  const changeArrayLength = (n: number) => {\n    setArrayLength(n);\n    generateArray(n);\n  };\n\n  const generateNewArray = () => generateArray(arrayLength);\n  const replaceArray = (arr: number[]) => {\n    // Replaces the array with a custom one\n    setArray(arr);\n    setArrayLength(arr.length);\n  };\n\n  return (\n    <ArrayStateContext.Provider value={{ array, arrayLength }}>\n      <ArrayActionsContext.Provider\n        value={{ changeArrayLength, generateNewArray, replaceArray }}\n      >\n        {children}\n      </ArrayActionsContext.Provider>\n    </ArrayStateContext.Provider>\n  );\n};\n\nconst useArrayState = () => {\n  const context = React.useContext(ArrayStateContext);\n  if (context === undefined) {\n    throw new Error('useArrayState must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nconst useArrayActions = () => {\n  const context = React.useContext(ArrayActionsContext);\n  if (context === undefined) {\n    throw new Error('useArrayActions must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nexport { useArrayState, useArrayActions, ArrayProvider };\n","import React from 'react';\n\ntype Props = {\n  width: number;\n  height: number;\n  color: string;\n};\n\nconst Bar: React.FC<Props> = ({ width, height, color }) => {\n  return (\n    <div className=\"bar\" style={{ width, height, backgroundColor: color }} />\n  );\n};\n\nexport default React.memo(Bar);\n","import React from 'react';\n\nimport { SortingPoints } from 'types';\n\nimport Bar from './Bar';\n\nimport { ValueMapper } from 'utils';\n\ntype Props = {\n  array: number[];\n  points: SortingPoints;\n};\n\nconst ArrayCanvas: React.FC<Props> = ({ array, points }) => {\n  const canvasHeight = 600;\n  const canvasWidth = 1200;\n  const gapWidth = 1;\n  const minBarHeight = 10;\n  const barColor = 'blue';\n\n  const minVal = Math.min(...array);\n  const maxVal = Math.max(...array);\n  const bars = array.length;\n\n  const heightMapper = ValueMapper(\n    [minVal, maxVal],\n    [minBarHeight, canvasHeight]\n  );\n  const barWidth = (canvasWidth - bars * gapWidth) / bars;\n\n  return (\n    <div\n      className=\"visualizer-canvas\"\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        height: canvasHeight,\n        width: canvasWidth,\n      }}\n    >\n      {array.map((nr, index) => (\n        <Bar\n          key={nr}\n          height={heightMapper(nr)}\n          width={barWidth}\n          color={points[index] || barColor}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ArrayCanvas;\n","type Interval = [number, number];\n\nexport default function ValueMapper(\n  originalInterval: Interval,\n  targetInterval: Interval\n) {\n  const [low1, high1] = originalInterval;\n  const [low2, high2] = targetInterval;\n\n  return (value: number) => {\n    const val = low2 + ((value - low1) * (high2 - low2)) / (high1 - low1);\n\n    return Math.round(val);\n  };\n}\n","import React from 'react';\n\nimport { useSortingState } from 'contexts';\n\nimport ArrayCanvas from './ArrayCanvas';\n\nconst Visualizer: React.FC = () => {\n  const { array, points } = useSortingState();\n\n  return (\n    <div>\n      <ArrayCanvas array={array} points={points} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React, { useState } from 'react';\n\nimport { useArrayActions, useArrayState } from 'contexts';\n\nconst ChangeArrayLengthInput: React.FC = () => {\n  const { arrayLength } = useArrayState();\n  const { changeArrayLength } = useArrayActions();\n\n  return (\n    <div>\n      <input\n        type=\"number\"\n        value={arrayLength}\n        onChange={(e) => {\n          const length = parseInt(e.target.value);\n          changeArrayLength(length);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ChangeArrayLengthInput;\n","import React from 'react';\n\nimport { useArrayActions } from 'contexts';\n\nconst GenerateArrayButton: React.FC = () => {\n  const { generateNewArray } = useArrayActions();\n\n  return <button onClick={generateNewArray}>GenerateArrayButton</button>;\n};\n\nexport default GenerateArrayButton;\n","import React from 'react';\n\nimport ChangeArrayLengthInput from './ChangeArrayLengthInput';\nimport GenerateArrayButton from './GenerateArrayButton';\n\nconst ArrayActions: React.FC = () => {\n  return (\n    <div>\n      <GenerateArrayButton />\n      <br />\n      Array Length: <ChangeArrayLengthInput />\n    </div>\n  );\n};\n\nexport default ArrayActions;\n","import React from 'react';\n\nimport { useSortingActions } from 'contexts';\n\nconst FrequencySlider: React.FC = () => {\n  const { changeFrequency } = useSortingActions();\n\n  return (\n    <input\n      type=\"range\"\n      min={1}\n      max={120}\n      onChange={(e) => {\n        const value = parseInt(e.target.value);\n        changeFrequency(value);\n      }}\n    />\n  );\n};\n\nexport default FrequencySlider;\n","import React from 'react';\n\nimport FrequencySlider from './FrequencySlider';\n\nconst SortingActions: React.FC = () => {\n  return (\n    <div>\n      Speed:\n      <FrequencySlider />\n    </div>\n  );\n};\n\nexport default SortingActions;\n","import React from 'react';\n\nimport { ArrayActions, SortingActions, Visualizer } from './views';\n\nimport { SortingProvider, ArrayProvider } from './contexts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArrayProvider>\n        <SortingProvider>\n          <Visualizer />\n          <ArrayActions />\n          <SortingActions />\n        </SortingProvider>\n      </ArrayProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}