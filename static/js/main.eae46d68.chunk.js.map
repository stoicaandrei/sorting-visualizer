{"version":3,"sources":["algorithms/selectionSort.ts","algorithms/bubbleSort.ts","algorithms/mergeSort.ts","contexts/AlgorithmContext.tsx","utils/generateArrayOfLength.ts","utils/shuffleArray.ts","utils/colorMapToSortingPoints.ts","hooks/useInterval.tsx","contexts/SortingContext.tsx","contexts/ArrayContext.tsx","App/Header/index.tsx","components/Visualizer/Bar.tsx","components/Visualizer/ArrayCanvas.tsx","utils/ValueMapper.ts","components/Visualizer/index.tsx","components/AlgorithmActions/CodeEditor.tsx","components/AlgorithmActions/AlgorithmEditor.tsx","components/AlgorithmActions/AlgorithmSelector.tsx","App/Sider.tsx","App/Content.tsx","App/index.tsx","ContextProvider.tsx","reportWebVitals.ts","index.tsx"],"names":["selectionSort","bubbleSort","mergeSort","AlgorithmStateContext","React","createContext","undefined","AlgorithmActionsContext","algorithmNames","Object","keys","algorithms","AlgorithmProvider","children","useState","selectedAlgorithm","setSelectedAlgorithm","algorithmString","setAlgorithmString","algorithm","setAlgorithm","selectAlgorithm","name","trueName","compileAlgorithm","sortingAlgorithm","eval","Provider","value","useAlgorithmState","context","useContext","Error","useAlgorithmActions","generateArrayOfLength","size","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffleArray","Array","from","x","i","colorMapToSortingPoints","colorMap","result","values","forEach","point","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","SortingStateContext","SortingActionsContext","SortingProvider","useArrayState","sortingSteps","setSortingSteps","frequency","setFrequency","points","setPoints","next","done","changeFrequency","ArrayStateContext","ArrayActionsContext","INITIAL_ARRAY","ArrayProvider","arrayLength","setArrayLength","setArray","generateArray","n","replaceArray","arr","useArrayActions","Header","theme","mode","selectable","Item","onClick","disabled","Bar","height","color","className","style","backgroundColor","memo","ArrayCanvas","heightMapper","originalInterval","targetInterval","low1","high1","low2","high2","val","round","ValueMapper","min","max","map","nr","index","Visualizer","useSortingState","CodeEditor","onChange","onValueChange","highlight","code","languages","js","AlgorithmEditor","AlgorithmSelector","e","target","Sider","collapsible","collapsedWidth","width","Content","App","ContextProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAAA,IAyBeA,EAzBI,kcCwBJC,EAxBC,gdCoDDC,EApDA,ujC,q7BCoBTC,sBAAwBC,6CAAMC,mBAAiCC,GAC/DC,wBAA0BH,6CAAMC,mBACpCC,GAGIE,eAAiBC,OAAOC,KAAKC,yCAE7BC,kBAA8B,SAA9BA,kBAA+B,MAAkB,IAAhBC,SAAe,KAAfA,SAAe,UACFC,oDAChD,aAFkD,4MAC7CC,kBAD6C,cAC1BC,qBAD0B,yBAINF,oDAASH,mDAJH,6MAI7CM,gBAJ6C,cAI5BC,mBAJ4B,yBAKlBJ,sDALkB,6MAK7CK,UAL6C,cAKlCC,aALkC,cAO9CC,gBAAkB,SAACC,GACvB,IAAMC,EAAWD,EACjBN,qBAAqBO,GACrBL,mBAAmBP,wCAAWY,KAG1BC,iBAAmB,SAAnBA,mBACJ,IAAIC,iBACJC,KAAKT,iBACLG,cAAa,kBAAMK,qBAGrB,OACE,2DAACtB,sBAAsBwB,SAAvB,CACEC,MAAO,CAAET,oBAAWF,gCAAiBT,8BAAgBO,qCADvD,SAGE,2DAACR,wBAAwBoB,SAAzB,CACEC,MAAO,CAAEV,sCAAoBM,kCAAkBH,iCADjD,SAGGR,cAMHgB,kBAAoB,WACxB,IAAMC,EAAU1B,6CAAM2B,WAAW5B,uBACjC,QAAgBG,IAAZwB,EACF,MAAM,IAAIE,MACR,6DAIJ,OAAOF,GAGHG,oBAAsB,WAC1B,IAAMH,EAAU1B,6CAAM2B,WAAWxB,yBACjC,QAAgBD,IAAZwB,EACF,MAAM,IAAIE,MACR,+DAIJ,OAAOF,I,yHC5EM,SAASI,EAAsBC,GAG5C,OCLa,SAAyBC,GAKtC,IAJA,IACIC,EAAgBC,EADhBC,EAAeH,EAAMI,OAIlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EDXAQ,CAFOC,MAAMC,KAAK,CAAEN,OAAQL,IAAQ,SAACY,EAAGC,GAAJ,OAAUA,MEDvD,IAUeC,EAViB,SAACC,GAC/B,IAAMC,EAAS,GAMf,OAJA1C,OAAO2C,OAAOF,GAAUG,SAAQ,SAACC,GAC/BH,EAAOG,GAAS,SAGXH,GCaMI,MApBf,SAAqBC,EAAsBC,GACzC,IAAMC,EAAgBC,mBAEtBC,qBAAU,WACRF,EAAcG,QAAUL,KAG1BI,qBAAU,WAMR,GAAc,OAAVH,EAAgB,CAClB,IAAMK,EAAKC,aANb,WACwC,qBAAlC,OAAOL,QAAP,IAAOA,OAAP,EAAOA,EAAeG,WACX,OAAbH,QAAa,IAAbA,KAAeG,aAIYJ,GAC7B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,K,OCDAQ,EAAsB7D,IAAMC,mBAAiCC,GAC7D4D,EAAwB9D,IAAMC,mBAClCC,GAKI6D,EAA4B,SAAC,GAAkB,IAAhBtD,EAAe,EAAfA,SAC3BuB,EAAUgC,IAAVhC,MACAjB,EAAcU,cAAdV,UAF0C,EAIVL,qBAJU,mBAI3CuD,EAJ2C,KAI7BC,EAJ6B,KAQlDV,qBAAU,WACRU,EAAgBnD,EAAYA,EAAUiB,QAAS9B,KAC9C,CAAC8B,EAAOjB,IAVuC,MAYhBL,mBAdV,IAE0B,mBAY3CyD,EAZ2C,KAYhCC,EAZgC,OAetB1D,mBAAS,IAfa,mBAe3C2D,EAf2C,KAenCC,EAfmC,KA4BlD,OAZAnB,GAAY,WACV,GAAKc,EAAL,CAEA,IAAMM,EAAON,EAAaM,OAE1B,IAAIA,EAAKC,KAAT,CAEA,IAAM1B,EAAWyB,EAAK/C,MAChB6C,EAASxB,EAAwBC,GACvCwB,EAAUD,OACT,KAAQF,GAAaF,EAAe,EAAI,OAGzC,cAACJ,EAAoBtC,SAArB,CAA8BC,MAAO,CAAEQ,QAAOqC,UAA9C,SACE,cAACP,EAAsBvC,SAAvB,CAAgCC,MAAO,CAAEiD,gBAjBrB,SAACN,GAAD,OAAuBC,EAAaD,KAiBxD,SACG1D,OCzCHiE,EAAoB1E,IAAMC,mBAAiCC,GAC3DyE,EAAsB3E,IAAMC,mBAAmCC,GAG/D0E,EAAgB9C,EADC,KAGjB+C,EAA0B,SAAC,GAAkB,IAAhBpE,EAAe,EAAfA,SAAe,EAEVC,mBALjB,KAG2B,mBAEzCoE,EAFyC,KAE5BC,EAF4B,OAGtBrE,mBAASkE,GAHa,mBAGzC5C,EAHyC,KAGlCgD,EAHkC,KAahD,OACE,cAACN,EAAkBnD,SAAnB,CAA4BC,MAAO,CAAEQ,QAAO8C,eAA5C,SACE,cAACH,EAAoBpD,SAArB,CACEC,MAAO,CAAEuD,iBAAgBE,cAXT,SAACC,GAAD,OAAeF,EAASlD,EAAsBoD,KAWtBC,aATzB,SAACC,GAEpBJ,EAASI,GACTL,EAAeK,EAAIhD,UAKjB,SAGG3B,OAMHuD,EAAgB,WACpB,IAAMtC,EAAU1B,IAAM2B,WAAW+C,GACjC,QAAgBxE,IAAZwB,EACF,MAAM,IAAIE,MAAM,qDAGlB,OAAOF,GAGH2D,EAAkB,WACtB,IAAM3D,EAAU1B,IAAM2B,WAAWgD,GACjC,QAAgBzE,IAAZwB,EACF,MAAM,IAAIE,MAAM,uDAGlB,OAAOF,G,QChCM4D,EAtBU,WAAO,IACtBR,EAAgBd,IAAhBc,YACAG,EAAkBI,IAAlBJ,cACA7D,EAAqBS,cAArBT,iBAER,OACE,cAAC,IAAOkE,OAAR,UACE,cAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,YAAY,EAAjD,SACE,qCACE,cAAC,IAAKC,KAAN,CAAWC,QAASvE,EAApB,kBACA,cAAC,IAAKsE,KAAN,CAAWC,QAAS,kBAAMV,EAAcH,IAAxC,gCAIA,cAAC,IAAKY,KAAN,CAAWE,UAAQ,EAAnB,0BACA,cAAC,IAAKF,KAAN,CAAWE,UAAQ,EAAnB,kC,QCdJC,EAAuB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACtC,OAAO,qBAAKC,UAAU,MAAMC,MAAO,CAAEH,SAAQI,gBAAiBH,MAGjD/F,MAAMmG,KAAKN,GCiCXO,EA/BsB,SAAC,GAAuB,IAArBpE,EAAoB,EAApBA,MAAOqC,EAAa,EAAbA,OAQvCgC,ECnBO,SACbC,EACAC,GACC,IAAD,cACsBD,EADtB,GACOE,EADP,KACaC,EADb,mBAEsBF,EAFtB,GAEOG,EAFP,KAEaC,EAFb,KAIA,OAAO,SAACnF,GACN,IAAMoF,EAAMF,GAASlF,EAAQgF,IAASG,EAAQD,IAAUD,EAAQD,GAEhE,OAAOnE,KAAKwE,MAAMD,IDSCE,CACnB,CAJazE,KAAK0E,IAAL,MAAA1E,KAAI,YAAQL,IACZK,KAAK2E,IAAL,MAAA3E,KAAI,YAAQL,KAIzB,CARmB,GADA,MAYrB,OACE,qBACEgE,UAAU,oBACVC,MAAO,CACLH,OAhBe,KAanB,SAMG9D,EAAMiF,KAAI,SAACC,EAAIC,GAAL,OACT,cAAC,EAAD,CAEErB,OAAQO,EAAaa,GACrBnB,MAAO1B,EAAO8C,IArBL,QAmBJD,SEnBAE,EAVc,WAAO,IAAD,ENwDX,WACtB,IAAM1F,EAAU1B,IAAM2B,WAAWkC,GACjC,QAAgB3D,IAAZwB,EACF,MAAM,IAAIE,MAAM,yDAGlB,OAAOF,EM7DmB2F,GAAlBrF,EADyB,EACzBA,MAAOqC,EADkB,EAClBA,OAEf,OACE,8BACE,cAAC,EAAD,CAAarC,MAAOA,EAAOqC,OAAQA,O,yBCY1BiD,G,YAXqB,SAAC,GAAyB,IAAvB9F,EAAsB,EAAtBA,MAAO+F,EAAe,EAAfA,SAC5C,OACE,cAAC,IAAD,CACE/F,MAAOA,EACPgG,cAAeD,EACfE,UAAW,SAACC,GAAD,OAAUD,oBAAUC,EAAMC,YAAUC,KAC/C5B,UAAU,kBCLD6B,EAPmB,WAAO,IAC/BhH,EAAoBY,cAApBZ,gBACAC,EAAuBe,cAAvBf,mBAER,OAAO,cAAC,EAAD,CAAYU,MAAOX,EAAiB0G,SAAUzG,KCexCgH,EArBqB,WAAO,IAAD,EACMrG,cAAtCd,EADgC,EAChCA,kBAAmBP,EADa,EACbA,eACnBa,EAAoBY,cAApBZ,gBAER,OACE,wBACEO,MAAOb,EACP4G,SAAU,SAACQ,GACT,IAAMvG,EAAQuG,EAAEC,OAAOxG,MACvBP,EAAgBO,IAJpB,SAOGpB,EAAe6G,KAAI,SAAC/F,GAAD,OAClB,wBAAQM,MAAON,EAAf,SACGA,GADuBA,SCFnB+G,EATS,WACtB,OACE,eAAC,IAAOA,MAAR,CAAcC,aAAW,EAACC,eAAgB,EAAGC,MAAM,MAAnD,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IAFF,QCMWC,EARW,WACxB,OACE,cAAC,IAAOA,QAAR,UACE,cAAC,EAAD,OCWSC,EAZO,WACpB,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,WCAOC,EAVmB,SAAC,GAAkB,IAAhB9H,EAAe,EAAfA,SACnC,OACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UAAkBA,SCMX+H,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eae46d68.chunk.js","sourcesContent":["const selectionSort = `\nsortingAlgorithm = function* (arr) {\n  const n = arr.length;\n\n  for (let i = 0; i < n; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n    for (let j = i + 1; j < n; j++) {\n      if (arr[j] < arr[min]) {\n        min = j;\n      }\n\n      yield { i, j };\n    }\n\n    if (min != i) {\n      // Swapping the elements\n      const tmp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = tmp;\n    }\n  }\n};\n`;\n\nexport default selectionSort;\n","const bubbleSort = `\nsortingAlgorithm = function* (arr) {\n  const n = arr.length;\n  let swapped;\n\n  for (let i = 0; i < n - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        // Swapping the elements\n        const tmp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = tmp;\n        swapped = true;\n      }\n\n      yield {i, j1: j, j2: j+1};\n    }\n\n    if (swapped == false) break;\n  }\n};\n`;\n\nexport default bubbleSort;\n","const mergeSort = `\nfunction* mergeArray(arr, start, mid, end) {\n  let start2 = mid + 1;\n\n  // If the direct merge is already sorted\n  if (arr[mid] <= arr[start2]) {\n    return;\n  }\n\n  // Two pointers to maintain start\n  // of both arrays to merge\n  while (start <= mid && start2 <= end) {\n    // If element 1 is in right place\n    if (arr[start] <= arr[start2]) {\n      start++;\n    } else {\n      const value = arr[start2];\n      let index = start2;\n\n      // Shift all the elements between element 1\n      // element 2, right by 1.\n      while (index != start) {\n        arr[index] = arr[index - 1];\n        index--;\n      }\n      arr[start] = value;\n\n      // Update all the pointers\n      start++;\n      mid++;\n      start2++;\n      yield { start, mid };\n    }\n  }\n}\n\nfunction* sort(arr, l, r) {\n  if (l < r) {\n    const m = Math.floor(l + (r - l) / 2);\n\n    yield* sort(arr, l, m);\n    yield* sort(arr, m + 1, r);\n\n    yield* mergeArray(arr, l, m, r);\n  }\n}\n\nsortingAlgorithm = function* (arr) {\n  yield* sort(arr, 0, arr.length - 1);\n};\n`;\n\nexport default mergeSort;\n","import React, { useState } from 'react';\n\nimport * as algorithms from 'algorithms';\nimport { SortingFunction } from 'types';\n\ntype AlgorithmName = keyof typeof algorithms;\n\ntype State = {\n  algorithmString: string;\n  algorithm?: SortingFunction;\n  algorithmNames: AlgorithmName[];\n  selectedAlgorithm?: AlgorithmName;\n};\n\ntype Actions = {\n  setAlgorithmString: (arg0: string) => void;\n  compileAlgorithm: () => void;\n  selectAlgorithm: (arg0: string) => void;\n};\n\nconst AlgorithmStateContext = React.createContext<State | undefined>(undefined);\nconst AlgorithmActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst algorithmNames = Object.keys(algorithms) as AlgorithmName[];\n\nconst AlgorithmProvider: React.FC = ({ children }) => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<AlgorithmName>(\n    'mergeSort'\n  );\n  const [algorithmString, setAlgorithmString] = useState(algorithms.mergeSort);\n  const [algorithm, setAlgorithm] = useState<SortingFunction | undefined>();\n\n  const selectAlgorithm = (name: string) => {\n    const trueName = name as AlgorithmName;\n    setSelectedAlgorithm(trueName);\n    setAlgorithmString(algorithms[trueName]);\n  };\n\n  const compileAlgorithm = () => {\n    let sortingAlgorithm: SortingFunction;\n    eval(algorithmString);\n    setAlgorithm(() => sortingAlgorithm);\n  };\n\n  return (\n    <AlgorithmStateContext.Provider\n      value={{ algorithm, algorithmString, algorithmNames, selectedAlgorithm }}\n    >\n      <AlgorithmActionsContext.Provider\n        value={{ setAlgorithmString, compileAlgorithm, selectAlgorithm }}\n      >\n        {children}\n      </AlgorithmActionsContext.Provider>\n    </AlgorithmStateContext.Provider>\n  );\n};\n\nconst useAlgorithmState = () => {\n  const context = React.useContext(AlgorithmStateContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAlgorithmState must be used within a AlgorithmProvider'\n    );\n  }\n\n  return context;\n};\n\nconst useAlgorithmActions = () => {\n  const context = React.useContext(AlgorithmActionsContext);\n  if (context === undefined) {\n    throw new Error(\n      'useAlgorithmActions must be used within a AlgorithmProvider'\n    );\n  }\n\n  return context;\n};\n\nexport { useAlgorithmState, useAlgorithmActions, AlgorithmProvider };\n","import { shuffleArray } from './index';\n\nexport default function generateArrayOfLength(size: number) {\n  const array = Array.from({ length: size }, (x, i) => i);\n\n  return shuffleArray(array);\n}\n","export default function shuffleArray<T>(array: T[]) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import { ColorMap, SortingPoints } from 'types';\n\nconst colorMapToSortingPoints = (colorMap: ColorMap): SortingPoints => {\n  const result = {} as SortingPoints;\n\n  Object.values(colorMap).forEach((point) => {\n    result[point] = 'red';\n  });\n\n  return result;\n};\n\nexport default colorMapToSortingPoints;\n","import { useRef, useEffect } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef<() => void | null>();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== 'undefined') {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from 'react';\n\nimport { ColorMapGenerator, SortingPoints } from 'types';\n\nimport { colorMapToSortingPoints } from 'utils';\n\nimport { useInterval } from 'hooks';\nimport { useArrayState, useAlgorithmState } from 'contexts';\n\ntype State = {\n  array: number[];\n  points: SortingPoints;\n};\n\ntype Actions = {\n  changeFrequency: (arg0: number) => void;\n};\n\nconst SortingStateContext = React.createContext<State | undefined>(undefined);\nconst SortingActionsContext = React.createContext<Actions | undefined>(\n  undefined\n);\n\nconst INITIAL_FREQUENCY = 60;\n\nconst SortingProvider: React.FC = ({ children }) => {\n  const { array } = useArrayState();\n  const { algorithm } = useAlgorithmState();\n\n  const [sortingSteps, setSortingSteps] = useState<\n    ColorMapGenerator | undefined\n  >();\n\n  useEffect(() => {\n    setSortingSteps(algorithm ? algorithm(array) : undefined);\n  }, [array, algorithm]);\n\n  const [frequency, setFrequency] = useState(INITIAL_FREQUENCY);\n  const changeFrequency = (frequency: number) => setFrequency(frequency);\n\n  const [points, setPoints] = useState({});\n  useInterval(() => {\n    if (!sortingSteps) return;\n\n    const next = sortingSteps.next();\n\n    if (next.done) return;\n\n    const colorMap = next.value;\n    const points = colorMapToSortingPoints(colorMap);\n    setPoints(points);\n  }, 1000 / (frequency * (sortingSteps ? 1 : 10000)));\n\n  return (\n    <SortingStateContext.Provider value={{ array, points }}>\n      <SortingActionsContext.Provider value={{ changeFrequency }}>\n        {children}\n      </SortingActionsContext.Provider>\n    </SortingStateContext.Provider>\n  );\n};\n\nconst useSortingState = () => {\n  const context = React.useContext(SortingStateContext);\n  if (context === undefined) {\n    throw new Error('useSortingState must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nconst useSortingActions = () => {\n  const context = React.useContext(SortingActionsContext);\n  if (context === undefined) {\n    throw new Error('useSortingActions must be used within a SortingProvider');\n  }\n\n  return context;\n};\n\nexport { useSortingState, useSortingActions, SortingProvider };\n","import React, { useState } from 'react';\n\nimport { generateArrayOfLength } from 'utils';\n\ntype State = {\n  array: number[];\n  arrayLength: number;\n};\n\ntype Actions = {\n  generateArray: (arg0: number) => void;\n  setArrayLength: (arg0: number) => void;\n  replaceArray: (args0: number[]) => void;\n};\n\nconst ArrayStateContext = React.createContext<State | undefined>(undefined);\nconst ArrayActionsContext = React.createContext<Actions | undefined>(undefined);\n\nconst INITIAL_LENGTH = 100;\nconst INITIAL_ARRAY = generateArrayOfLength(INITIAL_LENGTH);\n\nconst ArrayProvider: React.FC = ({ children }) => {\n  // The length is used for generating new arrays\n  const [arrayLength, setArrayLength] = useState(INITIAL_LENGTH);\n  const [array, setArray] = useState(INITIAL_ARRAY);\n\n  const generateArray = (n: number) => setArray(generateArrayOfLength(n));\n\n  const replaceArray = (arr: number[]) => {\n    // Replaces the array with a custom one\n    setArray(arr);\n    setArrayLength(arr.length);\n  };\n\n  return (\n    <ArrayStateContext.Provider value={{ array, arrayLength }}>\n      <ArrayActionsContext.Provider\n        value={{ setArrayLength, generateArray, replaceArray }}\n      >\n        {children}\n      </ArrayActionsContext.Provider>\n    </ArrayStateContext.Provider>\n  );\n};\n\nconst useArrayState = () => {\n  const context = React.useContext(ArrayStateContext);\n  if (context === undefined) {\n    throw new Error('useArrayState must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nconst useArrayActions = () => {\n  const context = React.useContext(ArrayActionsContext);\n  if (context === undefined) {\n    throw new Error('useArrayActions must be used within a ArrayProvider');\n  }\n\n  return context;\n};\n\nexport { useArrayState, useArrayActions, ArrayProvider };\n","import React from 'react';\n\nimport { Layout, Menu } from 'antd';\n\nimport { useArrayActions, useArrayState, useAlgorithmActions } from 'contexts';\n\nconst Header: React.FC = () => {\n  const { arrayLength } = useArrayState();\n  const { generateArray } = useArrayActions();\n  const { compileAlgorithm } = useAlgorithmActions();\n\n  return (\n    <Layout.Header>\n      <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\n        <>\n          <Menu.Item onClick={compileAlgorithm}>Play</Menu.Item>\n          <Menu.Item onClick={() => generateArray(arrayLength)}>\n            Generate New Array\n          </Menu.Item>\n\n          <Menu.Item disabled>Custom Array</Menu.Item>\n          <Menu.Item disabled>Speed & Size</Menu.Item>\n        </>\n      </Menu>\n    </Layout.Header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\ntype Props = {\n  height: number;\n  color: string;\n};\n\nconst Bar: React.FC<Props> = ({ height, color }) => {\n  return <div className=\"bar\" style={{ height, backgroundColor: color }} />;\n};\n\nexport default React.memo(Bar);\n","import React from 'react';\n\nimport { SortingPoints } from 'types';\n\nimport Bar from './Bar';\n\nimport { ValueMapper } from 'utils';\n\ntype Props = {\n  array: number[];\n  points: SortingPoints;\n};\n\nconst ArrayCanvas: React.FC<Props> = ({ array, points }) => {\n  const canvasHeight = 600;\n  const minBarHeight = 10;\n  const barColor = 'blue';\n\n  const minVal = Math.min(...array);\n  const maxVal = Math.max(...array);\n\n  const heightMapper = ValueMapper(\n    [minVal, maxVal],\n    [minBarHeight, canvasHeight]\n  );\n\n  return (\n    <div\n      className=\"visualizer-canvas\"\n      style={{\n        height: canvasHeight,\n      }}\n    >\n      {array.map((nr, index) => (\n        <Bar\n          key={nr}\n          height={heightMapper(nr)}\n          color={points[index] || barColor}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ArrayCanvas;\n","type Interval = [number, number];\n\nexport default function ValueMapper(\n  originalInterval: Interval,\n  targetInterval: Interval\n) {\n  const [low1, high1] = originalInterval;\n  const [low2, high2] = targetInterval;\n\n  return (value: number) => {\n    const val = low2 + ((value - low1) * (high2 - low2)) / (high1 - low1);\n\n    return Math.round(val);\n  };\n}\n","import React from 'react';\n\nimport { useSortingState } from 'contexts';\n\nimport ArrayCanvas from './ArrayCanvas';\n\nconst Visualizer: React.FC = () => {\n  const { array, points } = useSortingState();\n\n  return (\n    <div>\n      <ArrayCanvas array={array} points={points} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from 'react';\n\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-javascript';\n\ntype Props = {\n  value: string;\n  onChange: (arg0: string) => void;\n};\n\nconst CodeEditor: React.FC<Props> = ({ value, onChange }) => {\n  return (\n    <Editor\n      value={value}\n      onValueChange={onChange}\n      highlight={(code) => highlight(code, languages.js)}\n      className=\"code-editor\"\n    />\n  );\n};\n\nexport default CodeEditor;\n","import React from 'react';\n\nimport CodeEditor from './CodeEditor';\n\nimport { useAlgorithmState, useAlgorithmActions } from 'contexts';\n\nconst AlgorithmEditor: React.FC = () => {\n  const { algorithmString } = useAlgorithmState();\n  const { setAlgorithmString } = useAlgorithmActions();\n\n  return <CodeEditor value={algorithmString} onChange={setAlgorithmString} />;\n};\n\nexport default AlgorithmEditor;\n","import React from 'react';\n\nimport { useAlgorithmState, useAlgorithmActions } from 'contexts';\n\nconst AlgorithmSelector: React.FC = () => {\n  const { selectedAlgorithm, algorithmNames } = useAlgorithmState();\n  const { selectAlgorithm } = useAlgorithmActions();\n\n  return (\n    <select\n      value={selectedAlgorithm}\n      onChange={(e) => {\n        const value = e.target.value;\n        selectAlgorithm(value);\n      }}\n    >\n      {algorithmNames.map((name) => (\n        <option value={name} key={name}>\n          {name}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default AlgorithmSelector;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport { AlgorithmEditor, AlgorithmSelector } from 'components';\n\nconst Sider: React.FC = () => {\n  return (\n    <Layout.Sider collapsible collapsedWidth={0} width=\"40%\">\n      <AlgorithmSelector />\n      <AlgorithmEditor />/\n    </Layout.Sider>\n  );\n};\n\nexport default Sider;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport { Visualizer } from 'components';\n\nconst Content: React.FC = () => {\n  return (\n    <Layout.Content>\n      <Visualizer />\n    </Layout.Content>\n  );\n};\n\nexport default Content;\n","import React from 'react';\n\nimport { Layout } from 'antd';\n\nimport Header from './Header';\nimport Sider from './Sider';\nimport Content from './Content';\n\nconst App: React.FC = () => {\n  return (\n    <Layout>\n      <Header />\n      <Layout>\n        <Sider />\n        <Content />\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nimport { SortingProvider, ArrayProvider, AlgorithmProvider } from './contexts';\n\nconst ContextProvider: React.FC = ({ children }) => {\n  return (\n    <ArrayProvider>\n      <AlgorithmProvider>\n        <SortingProvider>{children}</SortingProvider>\n      </AlgorithmProvider>\n    </ArrayProvider>\n  );\n};\n\nexport default ContextProvider;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport ContextProvider from './ContextProvider';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'antd/dist/antd.css';\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}