{"version":3,"sources":["views/Visualizer/selectionSort.ts","hooks/useInterval.tsx","utils/generateArrayOfSize.ts","utils/shuffleArray.ts","contexts/sortingContext.tsx","views/Visualizer/Bar.tsx","views/Visualizer/ArrayCanvas.tsx","utils/ValueMapper.ts","views/Visualizer/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["displayRules","key","color","selectionSort","array","n","length","i","min","j","tmp","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","generateArrayOfSize","size","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffleArray","Array","from","x","SortingContext","React","createContext","SortingProvider","children","useState","selectionSortRules","generator","points","setPoints","frequency","setFrequency","next","done","values","value","forEach","rule","point","Provider","Bar","width","height","className","style","backgroundColor","memo","ArrayCanvas","minVal","maxVal","max","bars","heightMapper","originalInterval","targetInterval","low1","high1","low2","high2","val","round","ValueMapper","barWidth","display","justifyContent","map","nr","index","Visualizer","useContext","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e1f3a9c.chunk.js","sourcesContent":["import { SortingFunction } from './types';\n\nexport const displayRules = [\n  { key: 'i', color: 'red' },\n  { key: 'j', color: 'green' },\n];\n\nconst selectionSort: SortingFunction = function* (array) {\n  const n = array.length;\n\n  for (let i = 0; i < n; i++) {\n    // Finding the smallest number in the subarray\n    let min = i;\n    for (let j = i + 1; j < n; j++) {\n      if (array[j] < array[min]) {\n        min = j;\n      }\n\n      yield { array, i, j };\n    }\n\n    if (min != i) {\n      // Swapping the elements\n      const tmp = array[i];\n      array[i] = array[min];\n      array[min] = tmp;\n    }\n  }\n};\n\nexport default selectionSort;\n","import { useRef, useEffect } from 'react';\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef<() => void | null>();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (typeof savedCallback?.current !== 'undefined') {\n        savedCallback?.current();\n      }\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import { shuffleArray } from './index';\n\nexport default function generateArrayOfSize(size: number) {\n  const array = Array.from({ length: size }, (x, i) => i);\n\n  return shuffleArray(array);\n}\n","export default function shuffleArray<T>(array: T[]) {\n  let currentIndex = array.length;\n  let temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import React, { useState } from 'react';\n\nimport selectionSort, {\n  displayRules as selectionSortRules,\n} from 'views/Visualizer/selectionSort';\n\nimport { useInterval } from 'hooks';\nimport { generateArrayOfSize } from '../utils';\n\ntype ContextProps = {\n  array: number[];\n  points: any;\n};\n\nconst SortingContext = React.createContext<ContextProps>({} as any);\n\nconst SortingProvider: React.FC = ({ children }) => {\n  const [displayRules, setDisplayRules] = useState(selectionSortRules);\n  const [array, setArray] = useState(generateArrayOfSize(30));\n  const [generator] = useState(selectionSort(array));\n\n  const [points, setPoints] = useState([]);\n\n  const [frequency, setFrequency] = useState(10);\n\n  useInterval(() => {\n    const { done, value: values } = generator.next();\n\n    if (done) return setFrequency(0);\n\n    const points: any = {};\n    displayRules.forEach((rule) => {\n      const { key, color } = rule;\n      const point = values[key];\n\n      points[point] = color;\n    });\n    setPoints(points);\n  }, 1000 / frequency);\n\n  return (\n    <SortingContext.Provider value={{ array, points }}>\n      {children}\n    </SortingContext.Provider>\n  );\n};\n\nconst useSortingState = () => {\n  return React.useContext(SortingContext);\n};\n\nexport { useSortingState, SortingProvider };\n","import React from 'react';\n\ntype Props = {\n  width: number;\n  height: number;\n  color: string;\n};\n\nconst Bar: React.FC<Props> = ({ width, height, color }) => {\n  return (\n    <div className=\"bar\" style={{ width, height, backgroundColor: color }} />\n  );\n};\n\nexport default React.memo(Bar);\n","import React from 'react';\n\nimport { SortingPoints } from './types';\n\nimport Bar from './Bar';\n\nimport { ValueMapper } from 'utils';\n\ntype Props = {\n  array: number[];\n  points: SortingPoints;\n};\n\nconst ArrayCanvas: React.FC<Props> = ({ array, points }) => {\n  const canvasHeight = 400;\n  const canvasWidth = 600;\n  const gapWidth = 1;\n  const minBarHeight = 10;\n  const barColor = 'blue';\n\n  const minVal = Math.min(...array);\n  const maxVal = Math.max(...array);\n  const bars = array.length;\n\n  const heightMapper = ValueMapper(\n    [minVal, maxVal],\n    [minBarHeight, canvasHeight]\n  );\n  const barWidth = (canvasWidth - bars * gapWidth) / bars;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        height: canvasHeight,\n        width: canvasWidth,\n      }}\n    >\n      {array.map((nr, index) => (\n        <Bar\n          key={nr}\n          height={heightMapper(nr)}\n          width={barWidth}\n          color={points[index] || barColor}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ArrayCanvas;\n","type Interval = [number, number];\n\nexport default function ValueMapper(\n  originalInterval: Interval,\n  targetInterval: Interval\n) {\n  const [low1, high1] = originalInterval;\n  const [low2, high2] = targetInterval;\n\n  return (value: number) => {\n    const val = low2 + ((value - low1) * (high2 - low2)) / (high1 - low1);\n\n    return Math.round(val);\n  };\n}\n","import React from 'react';\n\nimport { useSortingState } from 'contexts';\n\nimport ArrayCanvas from './ArrayCanvas';\n\nconst Visualizer: React.FC = () => {\n  const { array, points } = useSortingState();\n\n  return (\n    <div>\n      <ArrayCanvas array={array} points={points} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from 'react';\n\nimport { Visualizer } from './views';\n\nimport { SortingProvider } from './contexts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingProvider>\n        <Visualizer />\n      </SortingProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}